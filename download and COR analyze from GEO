
## downloading the "GSE......" dataset that you want to Global Environment.
install.packages("BiocManager")
BiocManager::install("GEOquery")
library(GEOquery)

gse <- getGEO("GSE140943",GSEMatrix =TRUE, AnnotGPL=TRUE)

## check how many platforms used
length(gse)

## Some datasets on GEO may be derived from different microarray platforms. Therefore the object gse is a list of different datasets. You can find out how many were used by checking the length of the gse object. Usually there will only be one platform and the dataset we want to analyse will be the first object in the list (gse[[1]]).
gse <- gse[[1]]
gse

if (length(gse) > 1) idx <- grep("GPL6887", attr(gset, "names")) else idx <- 1
gset <- gse[[idx]]

# make proper column names to match toptable 
fvarLabels(gset) <- make.names(fvarLabels(gset))

sample_information <- pData(gset) ## print/make the sample information
gene_annotation <- fData(gset) ## print/make the gene annotation
expression_data <- exprs(gset) ## print/make the expression data

## Check the normalisation and scales used
pData(gset)$data_processing[1]

# For visualization and statistical analysis, we will inspect the data to 
# discover what scale the data are presented in. The methods we will use assume 
# the data are on a log2 scale; typically in the range of 0 to 16.

## have a look on the expression value
summary(exprs(gset))
# or
dim(exprs(gset))

# From this output we can see if the values go beyond 16, 
# so we need to perform a log2 transformation.
exprs(gset) <- log2(exprs(gset))

# check again the summary
summary(exprs(gset))

## A boxplot can also be generated to see if the data have been normalized. If so, the distributions of each sample should be highly similar.
boxplot(exprs(gset),outline=FALSE)

## Sample clustering
library(pheatmap)
corMatrix <- cor(exprs(gse),use="c") ## argument use="c" stops an error if there are any missing data points
pheatmap(corMatrix)

#rownames(sample_information) <- colnames(corMatrix)
#pheatmap(corMatrix, annotation_col=sample_information)  

## Inspect the clinical variables
## Print the row names of the sample information and check it matches the correlation matrix
rownames(pData(gset))

library(dplyr)
sample_information <- select(sample_information, source_name_ch1,characteristics_ch1.1)
## Optionally, rename to more convenient column names
sample_information <- rename(sample_information,sample = source_name_ch1, agent=characteristics_ch1.1)
sample_information

risk6_genes = c("Gbp2", "Fcgr1", "Serping1", "Tubgcp6", "Trmt2a", "Sdr39u1")

tT_risk6 = gset[which(gset$Gene.symbol %in% risk6_genes),]
summary(tT_risk6)

tT_final = list()
for (i in risk6_genes){
  x = tT_risk6[which(tT_risk6$Gene.symbol == i),]
  if (nrow(x) > 1){
    x = x[which.min(x$adj.P.Val),]
    tT_final[[i]] = x
  }
  else{
    tT_final[[i]] = x
  }
}
tT_final = dplyr::bind_rows(tT_final)

risk_genes_1 = tT_final$logFC[which(tT_final$Gene.symbol %in% c("Gbp2", "Fcgr1", "Serping1"))]
risk_genes_2 = tT_final$logFC[which(tT_final$Gene.symbol %in% c("Tubgcp6", "Trmt2a", "Sdr39u1"))]
risk6_geo_score = exp(mean(risk_genes_1)) - exp(mean(risk_genes_2))

## PCA
library(ggplot2)
library(ggrepel)
pca <- prcomp(t(exprs(gse)), scale. = T)
sample_information_PCA <- cbind(sample_information, pca$x)
ggplot(data=sample_information_PCA, aes(x = PC1, y=PC2, col=characteristics_ch1)) + geom_point()

## another way for PCA
install.packages("ggfortify")
library(ggfortify)
autoplot(pca)
View(pca)
autoplot(pca, data = sample_information_PCA, colour = "characteristics_ch1")

## Exporting the data
library(readr)
full_output <- cbind(fData(gse),exprs(gse))
write_csv(full_output, path="gse_full_output.csv")

features <- fData(gse)
View(features)
### Look at the features data frame and decide the names of the columns you want to keep
features_updated <- select(features,ID,Species,Transcript,ILMN_Gene,RefSeq_ID,Accession,Symbol,Entrez_Gene_ID,Chromosome,Cytoband)
full_output_updated <- cbind(features_updated,exprs(gse))
write_csv(full_output_updated, path="gse_full_output_updated.csv")

## Differential Expression
library(DESeq2)
# creating Sample tables
SampleTable <- data.frame(row.names=c("GSM4190920","GSM4190921","GSM4190922","GSM4190923","GSM4190924","GSM4190925","GSM4190926","GSM4190927","GSM4190928","GSM4190929","GSM4190930","GSM4190931","GSM4190932","GSM4190933","GSM4190934","GSM4190935","GSM4190936","GSM4190937","GSM4190938","GSM4190939","GSM4190940","GSM4190941","GSM4190942","GSM4190943","GSM4190944","GSM4190945"),condition=as.factor(c("uninfected","uninfected","uninfected","14d","14d","14d","14d","14d","21d","21d","21d","21d","21d","28d","28d","28d","28d","28d","56d","56d","56d","56d","56d","138d","138d","138d")))
SampleTable
# construct the DESeqDataSet object
ddsGSE140943 <- DESeqDataSetFromMatrix(countData=expression_data, colData=SampleTable, design=~condition)
# Run the DESeq pipeline
GSE140943_DESeq <- DESeq(ddsGSE140943)


